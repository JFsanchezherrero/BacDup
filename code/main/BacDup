#!/usr/bin/env python3
##############################################################
## Jose F. Sanchez & Alba Moya                              ##
## Copyright (C) 2020-2021                                  ##
##############################################################

import argparse
import sys
import os
import BacDup.modules

'''
Created on 5 ene. 2021
@author: alba

Modified in March 2021
@author: Jose F. Sanchez-Herrero
'''

parser = argparse.ArgumentParser(prog='BacDup',
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description="Creates gene duplication analysis for Bacterial/Archaeal genomes.")

subparsers = parser.add_subparsers(title='Available modules', help='', metavar='')

## help options list
help_options = ('--help_format',
                '--help_project',
                '--help_PhiSpy',
                '--help_multiqc',
                '--help_MGE_analysis',
                '--help_input',
                '--blast_help',
                '--detached_mode_help'
                )

subparser_space = subparsers.add_parser('Configuration', help='')
subparser_space = subparsers.add_parser('==============', help='')

#######################
#### Configuration ####
#######################
##------------------------------ Information help ---------------------- ##
subparser_help = subparsers.add_parser(
    'info',
    help='Print additional information & help messages ',
    description='For different modules, options or parameters print additional information and help messages',
)
subparser_help_name = subparser_help.add_argument_group("Show additional help information")
subparser_help = subparser_help_name.add_mutually_exclusive_group(required= True)
subparser_help.add_argument("--help_project", action="store_true", help="...")
subparser_help.add_argument("--help_format", action="store_true", help="...")
subparser_help.add_argument("--input_help", action="store_true", help="Provide additional help on input format")
subparser_help.add_argument("--help_multiqc", action="store_true", help="Show additional help on the multiQC module.")
subparser_help.add_argument("--help_input_MGE", action="store_true", help="Print further information for input options under MGE module.")
subparser_help.add_argument("--help_MGE_analysis", action="store_true", help="Print further information for Mobile Genetic Element module analysis.")
subparser_help.add_argument("--help_PhiSpy", action="store_true", help="Print further information for PhiSpy analysis.")

subparser_help.set_defaults(func=BacDup.modules.info.run_info)
##-------------------------------------------------------------##

##------------------------------ config ---------------------- ##
subparser_config = subparsers.add_parser(
    'config',
    help='Configures the pipeline',
    description='Configures dependencies, executables and additional python or perl modules.',
)
subparser_config.add_argument("option", help="Checks if missing any dependencies or modules or tries to install them.", choices=['check','install'])
subparser_config.add_argument("--install_path", help="Path to install missing modules or dependencies. [Default: BacDup/config folder]")
subparser_config.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")
subparser_config.set_defaults(func=BacDup.modules.config.run_config)
##-------------------------------------------------------------##

## space
subparser_space = subparsers.add_parser(' ', help='')

subparser_space = subparsers.add_parser('Analysis', help='')
subparser_space = subparsers.add_parser('==============', help='')

##------------------------------ input_parser ---------------------- ##
subparser_input = subparsers.add_parser(
    'input',
    help='Checks input for the pipeline',
    description='Checks the multiple format and options available for inputting data.',
)

in_out_input = subparser_input.add_argument_group("Input/Output")
in_out_input.add_argument("-o", "--output_folder", help="Output folder.", required= not any(elem in help_options for elem in sys.argv))

parameters_input_group = subparser_input.add_argument_group("Parameters")
parameters_input = parameters_input_group.add_mutually_exclusive_group()
parameters_input.add_argument("--annot_file", metavar="", help="Annotation file: GenBank (.gbk) or GFF (.gff)")
parameters_input.add_argument("--prot_file", metavar="", help="Protein sequence file")
parameters_input.add_argument("--GenBank_id", metavar="", help="GenBank accession ID")
parameters_input.add_argument("--tax_id", metavar="", help="NCBI taxonomy name or accession ID")
parameters_input.add_argument("--project", help="Folder containing a previous project information")

other_parameters_input = subparser_input.add_argument_group("Single sample annotation file parameters")
other_parameters_input.add_argument("--ref_file", metavar="", help="Genome references FASTA file (.fna, .fa, .fasta)")
other_parameters_input.add_argument("--sample_name", metavar="", help="If a single sample provided, the name to identify the sample")

batch_parameters_input = subparser_input.add_argument_group("Input batch options")
batch_parameters_input.add_argument("--batch", action="store_true", help="Provide this option if input are csv files containing a samples names and paths (csv format).")
batch_parameters_input.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input information [Default OFF].")
batch_parameters_input.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input information [Default OFF].")

genbank_parameters_input = subparser_input.add_argument_group("NCBI Taxonomy id input options")
genbank_parameters_input.add_argument("--assembly_level", help="Assembly level of the genomes to download", choices=['complete', 'chromosome', 'scaffold', 'contig', 'all'])
genbank_parameters_input.add_argument("--k_random", type=float, help="Number of entries to randomly select. Provide -1 for all entries")
genbank_parameters_input.add_argument("--section", help="Decide to download either from GenBank or RefSeq.", choices=['refseq', 'genbank'])

config_input = subparser_input.add_argument_group("Configuration")
config_input.add_argument("--db_folder", metavar="", help="Folder to store or containing database with GenBank and RefSeq entries previously downloaded")
config_input.add_argument("--debug", action="store_true", default=False)
config_input.add_argument("--detached", action="store_true", help="Isolated mode. --input is a folder containing fastq reads. Provide a unique path o several using --batch option")

help_input = subparser_input.add_argument_group("Additional information")
help_input.add_argument("--input_help", action="store_true", help="Provide additional help on input format")

subparser_input.set_defaults(func=BacDup.modules.input_parser.run_input)   
##-------------------------------------------------------------##


##------------------------------ search ---------------------- ##
subparser_search = subparsers.add_parser(
    'search',
    help='Creates gene duplication analysis',
    description='Creates gene duplication anaylsis using either pre-input data within a project folder or using a --detached mode.',
)

in_out_search = subparser_search.add_argument_group("Input/Output")
in_out_search.add_argument("-i", "--input_folder", help="Input folder containing project information.", required= not any(elem in help_options for elem in sys.argv))

config_search = subparser_search.add_argument_group("Configuration")
config_search.add_argument("--detached", action="store_true", help="Isolated mode. Provide a unique path for annotation file o several using --batch option. --input_folder becomes the output folder. See additional information in --detached_mode_help")
config_search.add_argument("--debug", action="store_true", default=False)
config_search.add_argument("--batch", action="store_true", help="Provide this option if input are csv files containing a samples names and paths (csv format).")
config_search.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input information [Default OFF].")
config_search.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input information [Default OFF].")

blast_parse_group = subparser_search.add_argument_group("BLAST parameters")
blast_parse_group.add_argument("-b", "--blast_folder", metavar="", help="BLAST binary folder. [ Default: automatic search of BLAST binaries in the system ]")    
blast_parse_group.add_argument("-bs", "--bitscore", type=float, metavar="", default=50, help="BLAST bit-score threshold. [ Default: 50 ]")
blast_parse_group.add_argument("-e", "--evalue", type=float, metavar="", default= 1e-05, help="BLAST e-value threshold [ Default: 1e-5 ]")
blast_parse_group.add_argument("-p", "--percentage", type=float, metavar="", default=85, help="Percentage of alignment in query. [ Default: 85 ]")
blast_parse_group.add_argument("-pi", "--pident", type=int, metavar="", default=85, help="Percentage of similarity in alignment. [ Default: 85 ]")

detached_mode_search = subparser_search.add_argument_group("Detached mode option")
detached_mode_search.add_argument("-a", "--annot_file", metavar="", help="Annotation file: genbank or GFF.")
detached_mode_search.add_argument("-r", "--fasta_file", metavar="", help="Genome references FASTA file.")
detached_mode_search.add_argument("-f", "--fasta_prot", metavar="", help="Fasta proteins sequences.")
detached_mode_search.add_argument("-c", "--annot_table", metavar="", help="Genome annotation .csv file previously analyzed.")
detached_mode_search.add_argument("-t", "--text_file", metavar="", help="Blast raw results text file.")
detached_mode_search.add_argument("--sample_name", metavar="", help="If a single sample provided, the name to identify the sample")

help_search = subparser_search.add_argument_group("Additional information")
help_search.add_argument("--input_help", action="store_true", help="Provide additional help on input format")
help_search.add_argument("--blast_help", action="store_true", help="BLAST parameters additional help and information")
help_search.add_argument("--project_help", action="store_true", help="Project mode additional information")
help_search.add_argument("--detached_mode_help", action="store_true", help="Detached mode additional information")

subparser_search.set_defaults(func=BacDup.modules.search.run_search)   

##------------------------------ dup_plotter ---------------------- ##
subparser_plot = subparsers.add_parser(
    'dup_plotter',
    help='Creates plot for visualization',
    description='.',
)


## space
subparser_space = subparsers.add_parser(' ', help='')


#####
args = parser.parse_args()
if hasattr(args, 'func'):
    args.func(args)
else:
    parser.print_help()
    