#!/usr/bin/env python3
##############################################################
## Jose F. Sanchez & Alba Moya                              ##
## Copyright (C) 2020-2021                                  ##
##############################################################
'''
Created on 5 ene. 2021
@author: alba

Modified in March 2021
@author: Jose F. Sanchez-Herrero
'''
import argparse
import sys
import os
import BacDup.modules
from termcolor import colored


parser = argparse.ArgumentParser(prog='BacDup',
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description="Get an annotation file with duplicated protein on genome.")

subparsers = parser.add_subparsers(title='Available modules', help='', metavar='')

## help options list
help_options = ('--help_format',
                '--help_project',
                '--help_PhiSpy',
                '--help_multiqc',
                '--help_MGE_analysis',
                '--help_input'
                )

subparser_space = subparsers.add_parser('Configuration', help='')
subparser_space = subparsers.add_parser('==============', help='')

#######################
#### Configuration ####
#######################
##------------------------------ Information help ---------------------- ##
subparser_help = subparsers.add_parser(
    'info',
    help='Print additional information & help messages ',
    description='For different modules, options or parameters print additional information and help messages',
)
subparser_help_name = subparser_help.add_argument_group("Show additional help information")
subparser_help = subparser_help_name.add_mutually_exclusive_group(required= True)
subparser_help.add_argument("--help_project", action="store_true", help="...")
subparser_help.add_argument("--help_format", action="store_true", help="...")
subparser_help.add_argument("--help_input", action="store_true", help="Provide additional help on input format")
subparser_help.add_argument("--help_multiqc", action="store_true", help="Show additional help on the multiQC module.")
subparser_help.add_argument("--help_input_MGE", action="store_true", help="Print further information for input options under MGE module.")
subparser_help.add_argument("--help_MGE_analysis", action="store_true", help="Print further information for Mobile Genetic Element module analysis.")
subparser_help.add_argument("--help_PhiSpy", action="store_true", help="Print further information for PhiSpy analysis.")

subparser_help.set_defaults(func=BacDup.modules.info.run_info)
##-------------------------------------------------------------##

##------------------------------ config ---------------------- ##
subparser_config = subparsers.add_parser(
    'config',
    help='Configure the pipeline',
    description='Configure dependencies, executables and additional python or perl modules.',
)
subparser_config.add_argument("option", help="Checks if missing any dependencies or modules or tries to install them.", choices=['check','install'])
subparser_config.add_argument("--install_path", help="Path to install missing modules or dependencies. [Default: BacDup/config folder]")
subparser_config.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")
subparser_config.set_defaults(func=BacDup.modules.config.run_config)
##-------------------------------------------------------------##

## space
subparser_space = subparsers.add_parser(' ', help='')

subparser_space = subparsers.add_parser('Analysis', help='')
subparser_space = subparsers.add_parser('==============', help='')

##------------------------------ input_parser ---------------------- ##
subparser_input = subparsers.add_parser(
    'input',
    help='Check input for the pipeline',
    description='Checks the multiple format and options available for inputting data.',
)

subparser_input.add_argument("-a", "--annot_file", metavar="", help="Annotation file: genbank or GFF", required= not any(elem in help_options for elem in sys.argv))
subparser_input.add_argument("-o", "--out_folder", metavar= "", help="Results folder", required= not any(elem in help_options for elem in sys.argv))
subparser_input.add_argument("-r", "--ref_file", metavar="", help="Genome references FASTA file")
subparser_input.add_argument("-p", "--prot_file", metavar="", help="Protein sequence file")
subparser_input.add_argument("--help_input", action="store_true", default=False, help="Provide further information")   
subparser_input.add_argument("--debug", action="store_true", default=False)
subparser_input.set_defaults(func=BacDup.modules.input_parser.run_input)   
##-------------------------------------------------------------##

##------------------------------ dup_annot ---------------------- ##
#annotparser = parser.add_argument_group('Annotation parser options named arguments')
#annotparser.add_argument("-a", "--annot_file", metavar="", help="Annotation file: genbank or GFF.")
#annotparser.add_argument("-r", "--ref_file", metavar="", help="Genome references FASTA file.")
#blastoptions = parser.add_argument_group('BLAST options named arguments')
#blastoptions.add_argument("-b", "--blast_folder", metavar="", help="BLAST binary folder. **Note blast_folder=/usr/bin is set by default**")    
#blastoptions.add_argument("-bs", "--bitscore", type=float, metavar="", default=50, help="BLAST bit-score: requires size of a sequence database in which the current match could be found just by chance. **Note bit_score = 50 is set by default**")
#blastoptions.add_argument("-d", "--db_name", metavar="", help="New database name")
#blastoptions.add_argument("-e", "--evalue", type=float, metavar="", default= 1e-05, help="BLAST e-value: number of expected hits of similar quality (score) that could be found just by chance. **Note e-value = 1e-05 is set by default**")
#blastoptions.add_argument("-p", "--percentage", type=float, metavar="", default=85, help="Percentage of alignment in query. *Note pident = 85 is set by default**")
#blastoptions.add_argument("-pi", "--pident", type=int, metavar="", default=85, help="Percentage of similarity in alignment. **Note percentage = 85 is set by default**")
#parser.add_argument("-c", "--annot_table", metavar="", help="Genome annotation .csv file previously analyzed.")
#parser.add_argument("-t", "--text_file", metavar="", help="Blast raw results text file.")
#parser.add_argument("--pseudo", action="store_true", default=False, help="Wether to use pseudogenes or not")
#parser.add_argument("-o", "--out_folder", metavar= "", help="Results folder")
#parser.add_argument("--debug", action="store_true", default=False)


#####
args = parser.parse_args()
if hasattr(args, 'func'):
    args.func(args)
else:
    parser.print_help()