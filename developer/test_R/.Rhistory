# @section Notes:
# No device is being opened until \code{off(reportGgPlot)} is called.
#
# @name ReportGgPlot-class
# @rdname ReportGgPlot-class
# @aliases initialize,ReportGgPlot-method
# @author Fabian Mueller
# @exportClass ReportGgPlot
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot()),
package = "RnBeads")
install.packages("ggplot2")
########################################################################################################################
## ReportPlot-class.R
## created: 2012-04-16
## creator: Yassen Assenov
##### Modified by Alba Moya Garces - 2021-04-26
##### Original script https://github.com/epigen/RnBeads/blob/369833af2810371f433909ad202dedaf1fa10e5d/R/Report-methods.R
## ---------------------------------------------------------------------------------------------------------------------
## ReportPlot class definition.
########################################################################################################################
## C L A S S ###########################################################################################################
# ReportPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportPlot.
#
# Slots:
#   fname -- Relative file name. It does not include path or extension.
#   width -- Width of the image in inches.
#   height -- Height of the image in inches.
#   create.pdf -- Flag indicating if a PDF image is created.
#   low.png -- Resolution, in dots per inch, used for the figure image.
#   high.png -- Resolution, in dots per inch, used for the high-resolution image.
#   dir.pdf -- Directory that contains the generated PDF file.
#   dir.png.low -- Directory that contains the generated figure image file.
#   dir.png.high -- Directory that contains the generated high-resolution image file.
#
#
# Methods and Functions:
# get.files} -- Gets the list of all files that are planned to be generated,
#        or were already generated by the report plot.
# off -- Copies the figure to a PNG file (if needed) and closes the device
#        associated with the report plot.
#
#
# @author Yassen Assenov
setClass("ReportPlot",
representation(fname = "character", width = "numeric", height = "numeric",
create.pdf = "logical", low.png = "integer", high.png = "integer",
dir.pdf = "character", dir.png.low = "character", dir.png.high = "character"),
prototype = prototype(fname = "temp", width = 7, height = 7,
create.pdf = TRUE, low.png = as.integer(100), high.png = as.integer(0),
dir.pdf = ".", dir.png.low = ".", dir.png.high = "."))
# ReportGgPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportGgPlot. It inherits from the ReportPlot class and handling is
# analogous, except that it contains an additional slot to store a ggplot object.
#
# @section Slots:
# \describe{
#   ggp -- \code{ggplot} object to be printed}
# }
# @section Notes:
# No device is being opened until \code{off(reportGgPlot)} is called.
#
# @name ReportGgPlot-class
# @rdname ReportGgPlot-class
# @aliases initialize,ReportGgPlot-method
# @author Fabian Mueller
# @exportClass ReportGgPlot
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot()),
package = "RnBeads")
require(ggplot2)
########################################################################################################################
## ReportPlot-class.R
## created: 2012-04-16
## creator: Yassen Assenov
##### Modified by Alba Moya Garces - 2021-04-26
##### Original script https://github.com/epigen/RnBeads/blob/369833af2810371f433909ad202dedaf1fa10e5d/R/Report-methods.R
## ---------------------------------------------------------------------------------------------------------------------
## ReportPlot class definition.
########################################################################################################################
## C L A S S ###########################################################################################################
# ReportPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportPlot.
#
# Slots:
#   fname -- Relative file name. It does not include path or extension.
#   width -- Width of the image in inches.
#   height -- Height of the image in inches.
#   create.pdf -- Flag indicating if a PDF image is created.
#   low.png -- Resolution, in dots per inch, used for the figure image.
#   high.png -- Resolution, in dots per inch, used for the high-resolution image.
#   dir.pdf -- Directory that contains the generated PDF file.
#   dir.png.low -- Directory that contains the generated figure image file.
#   dir.png.high -- Directory that contains the generated high-resolution image file.
#
#
# Methods and Functions:
# get.files} -- Gets the list of all files that are planned to be generated,
#        or were already generated by the report plot.
# off -- Copies the figure to a PNG file (if needed) and closes the device
#        associated with the report plot.
#
#
# @author Yassen Assenov
setClass("ReportPlot",
representation(fname = "character", width = "numeric", height = "numeric",
create.pdf = "logical", low.png = "integer", high.png = "integer",
dir.pdf = "character", dir.png.low = "character", dir.png.high = "character"),
prototype = prototype(fname = "temp", width = 7, height = 7,
create.pdf = TRUE, low.png = as.integer(100), high.png = as.integer(0),
dir.pdf = ".", dir.png.low = ".", dir.png.high = "."))
# ReportGgPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportGgPlot. It inherits from the ReportPlot class and handling is
# analogous, except that it contains an additional slot to store a ggplot object.
#
# @section Slots:
# \describe{
#   ggp -- \code{ggplot} object to be printed}
# }
# @section Notes:
# No device is being opened until \code{off(reportGgPlot)} is called.
#
# @name ReportGgPlot-class
# @rdname ReportGgPlot-class
# @aliases initialize,ReportGgPlot-method
# @author Fabian Mueller
# @exportClass ReportGgPlot
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot()),
package = "RnBeads")
########################################################################################################################
## ReportPlot-class.R
## created: 2012-04-16
## creator: Yassen Assenov
##### Modified by Alba Moya Garces - 2021-04-26
##### Original script https://github.com/epigen/RnBeads/blob/369833af2810371f433909ad202dedaf1fa10e5d/R/Report-methods.R
## ---------------------------------------------------------------------------------------------------------------------
## ReportPlot class definition.
########################################################################################################################
## C L A S S ###########################################################################################################
# ReportPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportPlot.
#
# Slots:
#   fname -- Relative file name. It does not include path or extension.
#   width -- Width of the image in inches.
#   height -- Height of the image in inches.
#   create.pdf -- Flag indicating if a PDF image is created.
#   low.png -- Resolution, in dots per inch, used for the figure image.
#   high.png -- Resolution, in dots per inch, used for the high-resolution image.
#   dir.pdf -- Directory that contains the generated PDF file.
#   dir.png.low -- Directory that contains the generated figure image file.
#   dir.png.high -- Directory that contains the generated high-resolution image file.
#
#
# Methods and Functions:
# get.files} -- Gets the list of all files that are planned to be generated,
#        or were already generated by the report plot.
# off -- Copies the figure to a PNG file (if needed) and closes the device
#        associated with the report plot.
#
#
# @author Yassen Assenov
setClass("ReportPlot",
representation(fname = "character", width = "numeric", height = "numeric",
create.pdf = "logical", low.png = "integer", high.png = "integer",
dir.pdf = "character", dir.png.low = "character", dir.png.high = "character"),
prototype = prototype(fname = "temp", width = 7, height = 7,
create.pdf = TRUE, low.png = as.integer(100), high.png = as.integer(0),
dir.pdf = ".", dir.png.low = ".", dir.png.high = "."))
# ReportGgPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportGgPlot. It inherits from the ReportPlot class and handling is
# analogous, except that it contains an additional slot to store a ggplot object.
#
# @section Slots:
# \describe{
#   ggp -- \code{ggplot} object to be printed}
# }
# @section Notes:
# No device is being opened until \code{off(reportGgPlot)} is called.
#
# @name ReportGgPlot-class
# @rdname ReportGgPlot-class
# @aliases initialize,ReportGgPlot-method
# @author Fabian Mueller
# @exportClass ReportGgPlot
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot())
########################################################################################################################
## ReportPlot-class.R
## created: 2012-04-16
## creator: Yassen Assenov
##### Modified by Alba Moya Garces - 2021-04-26
##### Original script https://github.com/epigen/RnBeads/blob/369833af2810371f433909ad202dedaf1fa10e5d/R/Report-methods.R
## ---------------------------------------------------------------------------------------------------------------------
## ReportPlot class definition.
########################################################################################################################
## C L A S S ###########################################################################################################
# ReportPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportPlot.
#
# Slots:
#   fname -- Relative file name. It does not include path or extension.
#   width -- Width of the image in inches.
#   height -- Height of the image in inches.
#   create.pdf -- Flag indicating if a PDF image is created.
#   low.png -- Resolution, in dots per inch, used for the figure image.
#   high.png -- Resolution, in dots per inch, used for the high-resolution image.
#   dir.pdf -- Directory that contains the generated PDF file.
#   dir.png.low -- Directory that contains the generated figure image file.
#   dir.png.high -- Directory that contains the generated high-resolution image file.
#
#
# Methods and Functions:
# get.files} -- Gets the list of all files that are planned to be generated,
#        or were already generated by the report plot.
# off -- Copies the figure to a PNG file (if needed) and closes the device
#        associated with the report plot.
#
#
# @author Yassen Assenov
setClass("ReportPlot",
representation(fname = "character", width = "numeric", height = "numeric",
create.pdf = "logical", low.png = "integer", high.png = "integer",
dir.pdf = "character", dir.png.low = "character", dir.png.high = "character"),
prototype = prototype(fname = "temp", width = 7, height = 7,
create.pdf = TRUE, low.png = as.integer(100), high.png = as.integer(0),
dir.pdf = ".", dir.png.low = ".", dir.png.high = "."))
# ReportGgPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportGgPlot. It inherits from the ReportPlot class and handling is
# analogous, except that it contains an additional slot to store a ggplot object.
#
# @section Slots:
# \describe{
#   ggp -- \code{ggplot} object to be printed}
# }
# @section Notes:
# No device is being opened until \code{off(reportGgPlot)} is called.
#
# @name ReportGgPlot-class
# @rdname ReportGgPlot-class
# @aliases initialize,ReportGgPlot-method
# @author Fabian Mueller
# @exportClass ReportGgPlot
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot()))
ReportPlot
########################################################################################################################
## ReportPlot-class.R
## created: 2012-04-16
## creator: Yassen Assenov
##### Modified by Alba Moya Garces - 2021-04-26
##### Original script https://github.com/epigen/RnBeads/blob/369833af2810371f433909ad202dedaf1fa10e5d/R/Report-methods.R
## ---------------------------------------------------------------------------------------------------------------------
## ReportPlot class definition.
########################################################################################################################
## C L A S S ###########################################################################################################
# ReportPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportPlot.
#
# Slots:
#   fname -- Relative file name. It does not include path or extension.
#   width -- Width of the image in inches.
#   height -- Height of the image in inches.
#   create.pdf -- Flag indicating if a PDF image is created.
#   low.png -- Resolution, in dots per inch, used for the figure image.
#   high.png -- Resolution, in dots per inch, used for the high-resolution image.
#   dir.pdf -- Directory that contains the generated PDF file.
#   dir.png.low -- Directory that contains the generated figure image file.
#   dir.png.high -- Directory that contains the generated high-resolution image file.
#
#
# Methods and Functions:
# get.files -- Gets the list of all files that are planned to be generated,
#        or were already generated by the report plot.
# off -- Copies the figure to a PNG file (if needed) and closes the device
#        associated with the report plot.
#
#
# @author Yassen Assenov
setClass("ReportPlot",
slots= c(fname = "character", width = "numeric", height = "numeric",
create.pdf = "logical", low.png = "integer", high.png = "integer",
dir.pdf = "character", dir.png.low = "character", dir.png.high = "character"),
prototype = prototype(fname = "temp", width = 7, height = 7,
create.pdf = TRUE, low.png = as.integer(100), high.png = as.integer(0),
dir.pdf = ".", dir.png.low = ".", dir.png.high = "."))
# ReportGgPlot Class
#
# Information about the files created to store one generated plot in a report. Report plots are initialized using the
# function createReportGgPlot. It inherits from the ReportPlot class and handling is
# analogous, except that it contains an additional slot to store a ggplot object.
#
# @section Slots:
#   ggp -- ggplot object to be printed.
# @author Fabian Mueller
setClass("ReportGgPlot",
slots= c(ggp="ANY"),
contains="ReportPlot",
prototype = prototype(ggp=ggplot())
)
require(ggplot2)
source("report_class.R")
setwd("~/git/BacDup/developer/test_R")
source("report_class.R")
source("Report_methods.R")
source("ReportPlot_class.R")
source("ReportPlot_methods.R")
source("logger.R")
source("options.R")
## Initialize the reports locations and the log
report.directory <- "BacDup_report_testing"
#a non-existent path
if (!bdp.initialize.reports(report.directory)) {
stop(paste("Could not initialize reports in", report.directory))
}
logfile <- file.path(report.directory, "quality.log")
logger.start("Testing Report Generation", fname = NULL)
source("logger.R")
logger.start("Testing Report Generation", fname = NULL)
logger.start("Testing Report Generation", fname = NULL)
source("logger.R")
logger.start("Testing Report Generation", fname = NULL)
warnings()
logger.start("Testing Report Generation", fname = NA)
report.dir <- "BacDup_report"
#
source("report_class.R")
# source("Report_methods.R")
# source("ReportPlot_class.R")
# source("ReportPlot_methods.R")
# source("logger.R")
# source("options.R")
#
if (!bdp.initialize.reports(report.directory)) {
stop(paste("Could not initialize reports in", report.directory))
}
source("Report_methods.R")
# source("ReportPlot_class.R")
# source("ReportPlot_methods.R")
# source("logger.R")
# source("options.R")
#
if (!bdp.initialize.reports(report.directory)) {
stop(paste("Could not initialize reports in", report.directory))
}
report.directory <- "BacDup_report"
stop(paste("Could not initialize reports in", report.directory))
report.directory <- "BacDup_report"
#
source("report_class.R")
source("Report_methods.R")
# source("ReportPlot_class.R")
# source("ReportPlot_methods.R")
# source("logger.R")
# source("options.R")
#
if (!bdp.initialize.reports(report.directory)) {
stop(paste("Could not initialize reports in", report.directory))
}
## Initialize the report
report <- createReport(file.path(report.directory, "example.html"), "Example")
is.flag
## Initialize the report
source("utilities.R")
report <- createReport(file.path(report.directory, "example.html"), "Example")
report <- createReport(file.path(report.directory, "example.html"), "Example")
#
source("report_class.R")
report <- createReport(file.path(report.directory, "example.html"), "Example")
report.directory <- "BacDup_report"
#
source("report_class.R")
source("Report_methods.R")
# source("ReportPlot_class.R")
# source("ReportPlot_methods.R")
# source("logger.R")
# source("options.R")
#
if (!bdp.initialize.reports(report.directory)) {
stop(paste("Could not initialize reports in", report.directory))
}
## Initialize the report
source("utilities.R")
report <- createReport(file.path(report.directory, "example.html"), "Example")
source("Report_methods.R")
return(invisible(complete.report(.Object)))
#
source("report_class.R")
source("Report_methods.R")
require(ggplot2)
source("report_class.R")
source("Report_methods.R")
source("ReportPlot_class.R")
source("ReportPlot_methods.R")
return(invisible(complete.report(.Object)))
setMethod("show", "Report",
function(object) {
cat("Object of class Report - an XHTML Report in BacDup\n")
infotext <- c("Report's file" = object@fname,
"Directory for configuration files" = object@dir.conf,
"Directory for data files" = object@dir.data,
"Directory for figure image files" = object@dir.fig,
"Directory for figure PDF files" = object@dir.pdfs,
"Directory for high-resolution image files" = object@dir.high,
"Number of references" = length(object@references))
n <- max(nchar(names(infotext)))
for (i in 1:length(infotext)) {
cat(sprintf(paste0("%", n, "s: %s\n"), names(infotext)[i], infotext[i]))
}
}
)
setMethod("off", "Report",
function(.Object) {
return(invisible(complete.report(.Object)))
}
)
setMethod("off", "Report",
function(.Object) {
return(invisible(complete.report(.Object)))
}
)
source("Report_methods.R")
return(invisible(complete.report(.Object)))
setMethod("off", "Report",
function(.Object) {
return(invisible(complete.report(.Object)))
}
)
setMethod("off", "Report",
function(.Object) {
return(invisible(complete.report(.Object)))
})
setMethod("off", "ReportPlot",
function(.Object) {
convert.f <- function(fname, ...) {
doerror <- function(e) {
dev.off()
em <- paste("Could not create file.", e$message)
if (logger.isinitialized()) {
logger.error(em)
} else {
stop(em)
}
}
tryCatch(
dev2bitmap(fname, type = "pngalpha", height = .Object@height, width = .Object@width,
method = "pdf", ...),
warning = function(e) {
if (grepl(" had status 1$", e$message)) {
doerror(e)
} else if (logger.isinitialized()) {
logger.warning(e$message)
} else {
invisible(e$message)
}
},
error = doerror)
}
if (.Object@create.pdf) {
if (.Object@high.png > 0) {
validate.dir(.Object@dir.png.high)
fname <- .Object@fname
if (.Object@low.png > 0 && .Object@dir.png.high == .Object@dir.png.low) {
fname <- paste0(fname, "_high_resolution")
}
fname <- file.path(.Object@dir.png.high, paste0(fname, ".png"))
convert.f(fname, res = .Object@high.png, fonts = c("Helvetica", "sans"))
}
if (.Object@low.png > 0) {
validate.dir(.Object@dir.png.low)
fname <- file.path(.Object@dir.png.low, paste0(.Object@fname, ".png"))
convert.f(fname, res = .Object@low.png, fonts = c("Helvetica", "sans"))
}
} else if (.Object@low.png > 0 && .Object@high.png > 0) {
validate.dir(.Object@dir.png.low)
fname <- file.path(.Object@dir.png.low, paste0(.Object@fname, ".png"))
convert.f(fname, res = .Object@low.png)
}
dev.off()
return(invisible(.Object))
}
)
